{
    "type": "error",
    "data": "Entity Extraction Error",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/extractors/graph/graph_extractor.py\", line 133, in __call__\n    result = await self._process_document(text, prompt_variables)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/extractors/graph/graph_extractor.py\", line 161, in _process_document\n    response = await self._llm(\n               ^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/json_parsing_llm.py\", line 34, in __call__\n    result = await self._delegate(input, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/openai_token_replacing_llm.py\", line 36, in __call__\n    input = perform_variable_replacements(input, history, variables)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/utils.py\", line 60, in perform_variable_replacements\n    result = replace_all(result)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/utils.py\", line 57, in replace_all\n    result = result.replace(f\"{{{entry}}}\", variables[entry])\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: replace() argument 2 must be str, not set\n",
    "source": "replace() argument 2 must be str, not set",
    "details": {
        "doc_index": 0,
        "text": "Printed circuit board\nElectronics assemblies are based on use of a printed circuit board of one\nform or another to hold components. Construction of these printed circuit\nboards is critical to soldering processes in that different printed circuit\nboard types have different thermal characteristics which can greatly affect\nhow they must be soldered.\nIn principle a printed circuit board (PCB) sometimes called a printed\nwiring board (PWB) or simply printed board comprises: a base which is\na thin board of insulating material supporting all the components which\nmake up a circuit; conducting tracks usually copper on one or both sides\nof the base making up the interconnections between components. Component\nconnecting leads are electrically connected in some form of permanent\nor semi-permanent way usually by soldering to lands sometimes called\npads ~ the areas of track specially designated for component connection\npurposes. If lands have holes drilled or punched through the board to\nfacilitate component mounting the board is a through-hole printed circuit\nboard. If lands have no holes the board is a surface mounted printed circuit\nboard.\nTo clarify the term printed is somewhat misleading as tracks are not\nprinted directly onto the board. It refers instead to just one stage within the\nwhole printed circuit board manufacturing process where the conducting\ntrack layout sometimes called pattern or image may be produced using\nsome form of printing technique.\nPrinted circuit boards can be made in one of two main ways. First in an\nadditive process the conductive track may be added to the surface of the\nbase material. There's a number of ways in which this can be done. Second\nin a subtractive process where base material is supplied with its whole\nsurface covered with a conductive layer track pattern is defined and excess\nconductive material is removed leaving the required track. Sometimes\nboth processes may be combined to produce printed circuit boards with\nmore than one layer of conductive track."
    }
}
{
    "type": "error",
    "data": "Error executing verb \"create_base_entity_graph\" in create_base_entity_graph: Columns must be same length as key",
    "stack": "Traceback (most recent call last):\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n             ^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/workflows/v1/subflows/create_base_entity_graph.py\", line 53, in create_base_entity_graph\n    output = await create_base_entity_graph_flow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/flows/create_base_entity_graph.py\", line 87, in create_base_entity_graph\n    clustered = cluster_graph(\n                ^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/cluster_graph.py\", line 90, in cluster_graph\n    output[[level_to, to]] = pd.DataFrame(output[to].tolist(), index=output.index)\n    ~~~~~~^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4299, in __setitem__\n    self._setitem_array(key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4341, in _setitem_array\n    check_key_length(self.columns, key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/indexers/utils.py\", line 390, in check_key_length\n    raise ValueError(\"Columns must be same length as key\")\nValueError: Columns must be same length as key\n",
    "source": "Columns must be same length as key",
    "details": null
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/run/run.py\", line 251, in run_pipeline\n    result = await _process_workflow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/run/workflow.py\", line 89, in _process_workflow\n    result = await workflow.run(context, callbacks)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 369, in run\n    timing = await self._execute_verb(node, context, callbacks)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n             ^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/workflows/v1/subflows/create_base_entity_graph.py\", line 53, in create_base_entity_graph\n    output = await create_base_entity_graph_flow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/flows/create_base_entity_graph.py\", line 87, in create_base_entity_graph\n    clustered = cluster_graph(\n                ^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/cluster_graph.py\", line 90, in cluster_graph\n    output[[level_to, to]] = pd.DataFrame(output[to].tolist(), index=output.index)\n    ~~~~~~^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4299, in __setitem__\n    self._setitem_array(key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4341, in _setitem_array\n    check_key_length(self.columns, key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/indexers/utils.py\", line 390, in check_key_length\n    raise ValueError(\"Columns must be same length as key\")\nValueError: Columns must be same length as key\n",
    "source": "Columns must be same length as key",
    "details": null
}
{
    "type": "error",
    "data": "Entity Extraction Error",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/extractors/graph/graph_extractor.py\", line 133, in __call__\n    result = await self._process_document(text, prompt_variables)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/extractors/graph/graph_extractor.py\", line 161, in _process_document\n    response = await self._llm(\n               ^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/json_parsing_llm.py\", line 34, in __call__\n    result = await self._delegate(input, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/openai_token_replacing_llm.py\", line 36, in __call__\n    input = perform_variable_replacements(input, history, variables)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/utils.py\", line 60, in perform_variable_replacements\n    result = replace_all(result)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/utils.py\", line 57, in replace_all\n    result = result.replace(f\"{{{entry}}}\", variables[entry])\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: replace() argument 2 must be str, not set\n",
    "source": "replace() argument 2 must be str, not set",
    "details": {
        "doc_index": 0,
        "text": "Printed circuit board\nElectronics assemblies are based on use of a printed circuit board of one\nform or another to hold components. Construction of these printed circuit\nboards is critical to soldering processes in that different printed circuit\nboard types have different thermal characteristics which can greatly affect\nhow they must be soldered.\nIn principle a printed circuit board (PCB) sometimes called a printed\nwiring board (PWB) or simply printed board comprises: a base which is\na thin board of insulating material supporting all the components which\nmake up a circuit; conducting tracks usually copper on one or both sides\nof the base making up the interconnections between components. Component\nconnecting leads are electrically connected in some form of permanent\nor semi-permanent way usually by soldering to lands sometimes called\npads ~ the areas of track specially designated for component connection\npurposes. If lands have holes drilled or punched through the board to\nfacilitate component mounting the board is a through-hole printed circuit\nboard. If lands have no holes the board is a surface mounted printed circuit\nboard.\nTo clarify the term printed is somewhat misleading as tracks are not\nprinted directly onto the board. It refers instead to just one stage within the\nwhole printed circuit board manufacturing process where the conducting\ntrack layout sometimes called pattern or image may be produced using\nsome form of printing technique.\nPrinted circuit boards can be made in one of two main ways. First in an\nadditive process the conductive track may be added to the surface of the\nbase material. There's a number of ways in which this can be done. Second\nin a subtractive process where base material is supplied with its whole\nsurface covered with a conductive layer track pattern is defined and excess\nconductive material is removed leaving the required track. Sometimes\nboth processes may be combined to produce printed circuit boards with\nmore than one layer of conductive track."
    }
}
{
    "type": "error",
    "data": "Error executing verb \"create_base_entity_graph\" in create_base_entity_graph: Columns must be same length as key",
    "stack": "Traceback (most recent call last):\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n             ^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/workflows/v1/subflows/create_base_entity_graph.py\", line 53, in create_base_entity_graph\n    output = await create_base_entity_graph_flow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/flows/create_base_entity_graph.py\", line 87, in create_base_entity_graph\n    clustered = cluster_graph(\n                ^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/cluster_graph.py\", line 90, in cluster_graph\n    output[[level_to, to]] = pd.DataFrame(output[to].tolist(), index=output.index)\n    ~~~~~~^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4299, in __setitem__\n    self._setitem_array(key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4341, in _setitem_array\n    check_key_length(self.columns, key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/indexers/utils.py\", line 390, in check_key_length\n    raise ValueError(\"Columns must be same length as key\")\nValueError: Columns must be same length as key\n",
    "source": "Columns must be same length as key",
    "details": null
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/run/run.py\", line 251, in run_pipeline\n    result = await _process_workflow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/run/workflow.py\", line 89, in _process_workflow\n    result = await workflow.run(context, callbacks)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 369, in run\n    timing = await self._execute_verb(node, context, callbacks)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n             ^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/workflows/v1/subflows/create_base_entity_graph.py\", line 53, in create_base_entity_graph\n    output = await create_base_entity_graph_flow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/flows/create_base_entity_graph.py\", line 87, in create_base_entity_graph\n    clustered = cluster_graph(\n                ^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/cluster_graph.py\", line 90, in cluster_graph\n    output[[level_to, to]] = pd.DataFrame(output[to].tolist(), index=output.index)\n    ~~~~~~^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4299, in __setitem__\n    self._setitem_array(key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4341, in _setitem_array\n    check_key_length(self.columns, key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/indexers/utils.py\", line 390, in check_key_length\n    raise ValueError(\"Columns must be same length as key\")\nValueError: Columns must be same length as key\n",
    "source": "Columns must be same length as key",
    "details": null
}
{
    "type": "error",
    "data": "Entity Extraction Error",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/extractors/graph/graph_extractor.py\", line 133, in __call__\n    result = await self._process_document(text, prompt_variables)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/extractors/graph/graph_extractor.py\", line 161, in _process_document\n    response = await self._llm(\n               ^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/json_parsing_llm.py\", line 34, in __call__\n    result = await self._delegate(input, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/openai_token_replacing_llm.py\", line 36, in __call__\n    input = perform_variable_replacements(input, history, variables)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/utils.py\", line 60, in perform_variable_replacements\n    result = replace_all(result)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/llm/openai/utils.py\", line 57, in replace_all\n    result = result.replace(f\"{{{entry}}}\", variables[entry])\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: replace() argument 2 must be str, not set\n",
    "source": "replace() argument 2 must be str, not set",
    "details": {
        "doc_index": 0,
        "text": "Printed circuit board\nElectronics assemblies are based on use of a printed circuit board of one\nform or another to hold components. Construction of these printed circuit\nboards is critical to soldering processes in that different printed circuit\nboard types have different thermal characteristics which can greatly affect\nhow they must be soldered.\nIn principle a printed circuit board (PCB) sometimes called a printed\nwiring board (PWB) or simply printed board comprises: a base which is\na thin board of insulating material supporting all the components which\nmake up a circuit; conducting tracks usually copper on one or both sides\nof the base making up the interconnections between components. Component\nconnecting leads are electrically connected in some form of permanent\nor semi-permanent way usually by soldering to lands sometimes called\npads ~ the areas of track specially designated for component connection\npurposes. If lands have holes drilled or punched through the board to\nfacilitate component mounting the board is a through-hole printed circuit\nboard. If lands have no holes the board is a surface mounted printed circuit\nboard.\nTo clarify the term printed is somewhat misleading as tracks are not\nprinted directly onto the board. It refers instead to just one stage within the\nwhole printed circuit board manufacturing process where the conducting\ntrack layout sometimes called pattern or image may be produced using\nsome form of printing technique.\nPrinted circuit boards can be made in one of two main ways. First in an\nadditive process the conductive track may be added to the surface of the\nbase material. There's a number of ways in which this can be done. Second\nin a subtractive process where base material is supplied with its whole\nsurface covered with a conductive layer track pattern is defined and excess\nconductive material is removed leaving the required track. Sometimes\nboth processes may be combined to produce printed circuit boards with\nmore than one layer of conductive track."
    }
}
{
    "type": "error",
    "data": "Error executing verb \"create_base_entity_graph\" in create_base_entity_graph: Columns must be same length as key",
    "stack": "Traceback (most recent call last):\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n             ^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/workflows/v1/subflows/create_base_entity_graph.py\", line 53, in create_base_entity_graph\n    output = await create_base_entity_graph_flow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/flows/create_base_entity_graph.py\", line 87, in create_base_entity_graph\n    clustered = cluster_graph(\n                ^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/cluster_graph.py\", line 90, in cluster_graph\n    output[[level_to, to]] = pd.DataFrame(output[to].tolist(), index=output.index)\n    ~~~~~~^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4299, in __setitem__\n    self._setitem_array(key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4341, in _setitem_array\n    check_key_length(self.columns, key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/indexers/utils.py\", line 390, in check_key_length\n    raise ValueError(\"Columns must be same length as key\")\nValueError: Columns must be same length as key\n",
    "source": "Columns must be same length as key",
    "details": null
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/run/run.py\", line 251, in run_pipeline\n    result = await _process_workflow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/run/workflow.py\", line 89, in _process_workflow\n    result = await workflow.run(context, callbacks)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 369, in run\n    timing = await self._execute_verb(node, context, callbacks)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n             ^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/workflows/v1/subflows/create_base_entity_graph.py\", line 53, in create_base_entity_graph\n    output = await create_base_entity_graph_flow(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/flows/create_base_entity_graph.py\", line 87, in create_base_entity_graph\n    clustered = cluster_graph(\n                ^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/cluster_graph.py\", line 90, in cluster_graph\n    output[[level_to, to]] = pd.DataFrame(output[to].tolist(), index=output.index)\n    ~~~~~~^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4299, in __setitem__\n    self._setitem_array(key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/frame.py\", line 4341, in _setitem_array\n    check_key_length(self.columns, key, value)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/pandas/core/indexers/utils.py\", line 390, in check_key_length\n    raise ValueError(\"Columns must be same length as key\")\nValueError: Columns must be same length as key\n",
    "source": "Columns must be same length as key",
    "details": null
}
{
    "type": "error",
    "data": "Error in Umap",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/layout_graph/methods/umap.py\", line 56, in run\n    return compute_umap_positions(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/visualization/compute_umap_positions.py\", line 71, in compute_umap_positions\n    ).fit_transform(embedding_vectors)\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2891, in fit_transform\n    self.fit(X, y, force_all_finite)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2784, in fit\n    self.embedding_, aux_data = self._fit_embed_data(\n                                ^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2830, in _fit_embed_data\n    return simplicial_set_embedding(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 1087, in simplicial_set_embedding\n    graph.data[graph.data < (graph.data.max() / float(n_epochs_max))] = 0.0\n                             ^^^^^^^^^^^^^^^^\n  File \"/local/python3.11-Anaconda3-2024.03-RSU-VI/lib/python3.11/site-packages/numpy/core/_methods.py\", line 41, in _amax\n    return umr_maximum(a, axis, None, out, keepdims, initial, where)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: zero-size array to reduction operation maximum which has no identity\n",
    "source": "zero-size array to reduction operation maximum which has no identity",
    "details": null
}
{
    "type": "error",
    "data": "Error in Umap",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/layout_graph/methods/umap.py\", line 56, in run\n    return compute_umap_positions(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/visualization/compute_umap_positions.py\", line 71, in compute_umap_positions\n    ).fit_transform(embedding_vectors)\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2891, in fit_transform\n    self.fit(X, y, force_all_finite)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2784, in fit\n    self.embedding_, aux_data = self._fit_embed_data(\n                                ^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2830, in _fit_embed_data\n    return simplicial_set_embedding(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 1087, in simplicial_set_embedding\n    graph.data[graph.data < (graph.data.max() / float(n_epochs_max))] = 0.0\n                             ^^^^^^^^^^^^^^^^\n  File \"/local/python3.11-Anaconda3-2024.03-RSU-VI/lib/python3.11/site-packages/numpy/core/_methods.py\", line 41, in _amax\n    return umr_maximum(a, axis, None, out, keepdims, initial, where)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: zero-size array to reduction operation maximum which has no identity\n",
    "source": "zero-size array to reduction operation maximum which has no identity",
    "details": null
}
{
    "type": "error",
    "data": "Error in Umap",
    "stack": "Traceback (most recent call last):\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/operations/layout_graph/methods/umap.py\", line 56, in run\n    return compute_umap_positions(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/cip/ce/ix05ogym/Majid/LLM/graphrag/graphrag/graphrag/index/graph/visualization/compute_umap_positions.py\", line 71, in compute_umap_positions\n    ).fit_transform(embedding_vectors)\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2891, in fit_transform\n    self.fit(X, y, force_all_finite)\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2784, in fit\n    self.embedding_, aux_data = self._fit_embed_data(\n                                ^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 2830, in _fit_embed_data\n    return simplicial_set_embedding(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/proj/ciptmp/ix05ogym/myenv/lib/python3.11/site-packages/umap/umap_.py\", line 1087, in simplicial_set_embedding\n    graph.data[graph.data < (graph.data.max() / float(n_epochs_max))] = 0.0\n                             ^^^^^^^^^^^^^^^^\n  File \"/local/python3.11-Anaconda3-2024.03-RSU-VI/lib/python3.11/site-packages/numpy/core/_methods.py\", line 41, in _amax\n    return umr_maximum(a, axis, None, out, keepdims, initial, where)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: zero-size array to reduction operation maximum which has no identity\n",
    "source": "zero-size array to reduction operation maximum which has no identity",
    "details": null
}
